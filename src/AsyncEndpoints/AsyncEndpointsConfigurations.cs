using System;

namespace AsyncEndpoints;

/// <summary>
/// Configuration settings for the AsyncEndpoints library.
/// </summary>
public sealed class AsyncEndpointsConfigurations
{
    /// <summary>
    /// Gets or sets the worker-specific configurations.
    /// </summary>
    public AsyncEndpointsWorkerConfigurations WorkerConfigurations { get; set; } = new();

    public AsyncEndpointsJobManagerConfiguration JobManagerConfiguration { get; set; } = new();
}

/// <summary>
/// Configuration settings for AsyncEndpoints background workers.
/// </summary>
public sealed class AsyncEndpointsWorkerConfigurations
{
    /// <summary>
    /// Gets or sets the unique identifier for the worker instance.
    /// A new GUID is generated by default.
    /// </summary>
    public Guid WorkerId { get; set; } = Guid.NewGuid();

    /// <summary>
    /// Gets or sets the maximum number of concurrent jobs the worker can process.
    /// Default value is the number of logical processors on the machine.
    /// </summary>
    public int MaximumConcurrency { get; set; } = Environment.ProcessorCount;

    /// <summary>
    /// Gets or sets the polling interval in milliseconds for checking new jobs.
    /// </summary>
    public int PollingIntervalMs { get; set; } = AsyncEndpointsConstants.DefaultPollingIntervalMs;

    /// <summary>
    /// Gets or sets the timeout in minutes for job execution.
    /// Jobs that run longer than this will be marked as failed.
    /// </summary>
    public int JobTimeoutMinutes { get; set; } = AsyncEndpointsConstants.DefaultJobTimeoutMinutes;

    /// <summary>
    /// Gets or sets the maximum number of jobs to process in a single batch.
    /// </summary>
    public int BatchSize { get; set; } = AsyncEndpointsConstants.DefaultBatchSize;

    /// <summary>
    /// Gets or sets the maximum size of the job queue.
    /// </summary>
    public int MaximumQueueSize { get; set; } = AsyncEndpointsConstants.DefaultMaximumQueueSize;
}

public sealed class AsyncEndpointsJobManagerConfiguration
{
    public int DefaultMaxRetries { get; set; } = AsyncEndpointsConstants.MaximumRetries;
    public double RetryDelayBaseSeconds { get; set; } = 2.0;
    public TimeSpan JobClaimTimeout { get; set; } = TimeSpan.FromMinutes(5);
    public int MaxConcurrentJobs { get; set; } = 10;
    public int JobPollingIntervalMs { get; set; } = 1000;
    public int MaxClaimBatchSize { get; set; } = 10;
    public TimeSpan StaleJobClaimCheckInterval { get; set; } = TimeSpan.FromMinutes(1);
}
