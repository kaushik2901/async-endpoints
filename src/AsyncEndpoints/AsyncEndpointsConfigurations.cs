using System;

namespace AsyncEndpoints;

/// <summary>
/// Configuration settings for the AsyncEndpoints library.
/// </summary>
public sealed class AsyncEndpointsConfigurations
{
	/// <summary>
	/// Gets or sets the worker-specific configurations.
	/// </summary>
	public AsyncEndpointsWorkerConfigurations WorkerConfigurations { get; set; } = new();

	public AsyncEndpointsJobManagerConfiguration JobManagerConfiguration { get; set; } = new();
}

/// <summary>
/// Configuration settings for AsyncEndpoints background workers.
/// </summary>
public sealed class AsyncEndpointsWorkerConfigurations
{
	/// <summary>
	/// Gets or sets the unique identifier for the worker instance.
	/// A new GUID is generated by default.
	/// </summary>
	public Guid WorkerId { get; set; } = Guid.NewGuid();

	/// <summary>
	/// Gets or sets the maximum number of concurrent jobs the worker can process.
	/// Default value is the number of logical processors on the machine.
	/// </summary>
	public int MaximumConcurrency { get; set; } = Environment.ProcessorCount;

	/// <summary>
	/// Gets or sets the polling interval in milliseconds for checking new jobs.
	/// </summary>
	public int PollingIntervalMs { get; set; } = AsyncEndpointsConstants.DefaultPollingIntervalMs;

	/// <summary>
	/// Gets or sets the timeout in minutes for job execution.
	/// Jobs that run longer than this will be marked as failed.
	/// </summary>
	public int JobTimeoutMinutes { get; set; } = AsyncEndpointsConstants.DefaultJobTimeoutMinutes;

	/// <summary>
	/// Gets or sets the maximum number of jobs to process in a single batch.
	/// </summary>
	public int BatchSize { get; set; } = AsyncEndpointsConstants.DefaultBatchSize;

	/// <summary>
	/// Gets or sets the maximum size of the job queue.
	/// </summary>
	public int MaximumQueueSize { get; set; } = AsyncEndpointsConstants.DefaultMaximumQueueSize;
}

/// <summary>
/// Configuration settings for the AsyncEndpoints job manager.
/// </summary>
public sealed class AsyncEndpointsJobManagerConfiguration
{
	/// <summary>
	/// Gets or sets the default maximum number of retries for failed jobs.
	/// </summary>
	public int DefaultMaxRetries { get; set; } = AsyncEndpointsConstants.MaximumRetries;

	/// <summary>
	/// Gets or sets the base delay in seconds for job retry exponential backoff.
	/// </summary>
	public double RetryDelayBaseSeconds { get; set; } = 2.0;

	/// <summary>
	/// Gets or sets the timeout for job claims.
	/// </summary>
	public TimeSpan JobClaimTimeout { get; set; } = TimeSpan.FromMinutes(5);

	/// <summary>
	/// Gets or sets the maximum number of concurrent jobs that can be processed.
	/// </summary>
	public int MaxConcurrentJobs { get; set; } = 10;

	/// <summary>
	/// Gets or sets the polling interval in milliseconds for job polling.
	/// </summary>
	public int JobPollingIntervalMs { get; set; } = 1000;

	/// <summary>
	/// Gets or sets the maximum number of jobs to claim in a single batch.
	/// </summary>
	public int MaxClaimBatchSize { get; set; } = 10;

	/// <summary>
	/// Gets or sets the interval for checking for stale job claims.
	/// </summary>
	public TimeSpan StaleJobClaimCheckInterval { get; set; } = TimeSpan.FromMinutes(1);
}
